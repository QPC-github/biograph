#pragma once

#include <vector>
#include <map>
#include <memory>

class scoped_temp_file;

// Merges flattened seqset files.  Takes a set of temp files generated by flatten_seqset
// and merges the files for a given partition, covering a specific range of DNA space.
// Returns a vector of merged files in DNA sequence order.
class merge_flat_seqsets
{
	using temp_files_t = std::vector<std::shared_ptr<scoped_temp_file>>;

public:
	merge_flat_seqsets() : m_seq_count(0UL) {}

	void operator() (
		const std::string& merged_seqset_path
		, const std::multimap<int, std::shared_ptr<scoped_temp_file>>& temp_files_map
		, bool write_flat,
        unsigned max_read_len
	);

private:
	std::vector<std::shared_ptr<scoped_temp_file>> merge_seqs
		(const std::multimap<int, std::shared_ptr<scoped_temp_file>>& temp_files_map);

	std::shared_ptr<scoped_temp_file> do_merge(
		int partition,
		const std::multimap<int, std::shared_ptr<scoped_temp_file>>& temp_files_map
	);

	void create_seqset(
		const std::string& seqset_pth
		, std::vector<std::shared_ptr<scoped_temp_file>> merged_temp_files
		, const bool write_flat, unsigned max_read_len
	) const;

	friend void merge_seqsets_test(int num_threads
		, const std::vector<std::string>& seqset_paths
		, const std::string& merged_seqs_output_path
	);
	friend std::vector<std::shared_ptr<scoped_temp_file>> make_temp_files(
		const std::vector<std::string>& seqset_paths
		, int num_threads
	);

	std::atomic_uint_fast64_t m_seq_count;
};

