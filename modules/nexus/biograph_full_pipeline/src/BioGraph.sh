#!/bin/bash
# BioGraph full_pipeline 6.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of tarball: '$tarball'"
    echo "Value of reads: '$reads'"
    echo "Value of reference: '$reference'"
    echo "Value of model: '$model'"
    echo "Value of keep: '$keep'"
    echo "Value of create: '$create'"
    echo "Value of discovery: '$discovery'"
    echo "Value of coverage: '$coverage'"
    echo "Value of grm: '$grm'"
    echo "Value of qual_classifier: '$qual_classifier'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
    dx download "$tarball" -o biograph.install.tgz

    mkdir reference
    dx download "$reference" -o reference.tar && tar xvf reference.tar -C reference --no-same-owner &
    
    dx download "$model" -o model.ml &
    read_name=$(dx describe "$reads" --name)
    dx download "$reads" -o ${read_name} &
    
    # Filling out parameters
    declare -a cust_args
    if [ -n "$keep" ]
    then
        cust_args+=("--keep")
        cust_args+=("${keep}")
    fi
    if [ -n "$create" ]
    then
        cust_args+=("--create")
        cust_args+=("${create}")
    fi
    if [ -n "$discovery" ]
    then
        cust_args+=("--discovery")
        cust_args+=("${discovery}")
    fi
    if [ -n "$coverage" ]
    then
        cust_args+=("--coverage")
        cust_args+=("${coverage}")
    fi
    if [ -n "$grm" ]
    then
        cust_args+=("--grm")
        cust_args+=("${grm}")
    fi
    if [ -n "$qual_classifier" ]
    then
        cust_args+=("--qual_classifier")
        cust_args+=("${qual_classifier}")
    fi

    # Fill in your application code here.
    echo "Installing BioGraph"
    hold=$PYTHONPATH
    unset PYTHONPATH
    sudo -H apt-get install -y python3-venv
    python3 -m venv pyenv
    source pyenv/bin/activate
    python3 -m pip install --upgrade pip
    python3 -m pip install biograph.install.tgz

    sudo apt-get install -y vcftools 
    echo Waiting on Downloads
    wait
    
    echo "Beginning BioGraph"
    output_prefix=${read_name%.*}
    bg_name=${output_prefix}.bg
    ref_name=reference/$(ls reference/) 
    echo "biograph: " ${bg_name}
    echo "reference: " ${ref_name}
    echo "reads: " ${read_name}
    
    biograph full_pipeline -b ${bg_name} -r ${ref_name} -m model.ml --reads ${read_name} "${cust_args[@]}"
    
    # Ensuring we're in dnanexus' python, just in case
    deactivate
    PYTHONPATH=$hold
    
        
    # Should probably trap non-zero exits and then us dx-jobutil-report-error from the tail??
    # 
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
    echo "Preparing Outputs"
    tar cvf ${bg_name}.tar ${bg_name} &

    mv  ${bg_name}/analysis/results.vcf.gz ${output_prefix}.vcf.gz
    mv ${bg_name}/analysis/results.vcf.gz.tbi ${output_prefix}.vcf.gz.tbi
    vcf_upload_id=$(dx upload ${output_prefix}.vcf.gz --brief)
    vcfidx_upload_id=$(dx upload ${output_prefix}.vcf.gz.tbi --brief)
    dx-jobutil-add-output output_vcf "$vcf_upload_id" --class=file
    dx-jobutil-add-output output_vcfidx "$vcfidx_upload_id" --class=file
    wait

    biograph_upload_id=$(dx upload ${bg_name}.tar --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output biograph "$biograph_upload_id" --class=file
}
