#!/usr/bin/env python3

import os
import sys
import subprocess
import requests

import boto3

KEEPALIVE_FILE = '/tmp/do_not_stop'
WARN_FILE = '/tmp/ec2mgr_warning'

def meta_data(path):
    """this is Amazon's documented magical IP for grabbing metadata"""
    r = requests.get('http://169.254.169.254/latest/meta-data/%s' % path)
    if not r.ok:
        raise RuntimeError(r.text)
    return r.text.strip()

def find_record(zone, name):
    for rtype in ['A', 'CNAME']:
        record = zone.find_records(name, rtype)
        if record:
            return record
    return None

def get_region():
    return meta_data('placement/availability-zone')[:-1]

def get_hostname():
    return subprocess.check_output('aws ec2 describe-tags --region {0} --filters "Name=resource-id,Values={1}" --output=text|grep -w hostname|cut -f 5'.format(
        get_region(), meta_data('instance-id')), shell=True).decode("utf-8").strip()

def boot():
    # Remove state files from previous boot, if any
    for f in [WARN_FILE, KEEPALIVE_FILE]:
        try:
            os.remove(f)
        except OSError:
            pass

    hostname = get_hostname()

    if not hostname:
        print('No hostname tag found, not setting Route53.')
        return

    source = '%s.spiralgenetics.com' % hostname
    target = meta_data('public-ipv4')

    print('Configuring Route53: %s -> %s' % (source, target))

    dns = boto3.client('route53')
    zones = dns.list_hosted_zones_by_name(DNSName='spiralgenetics.com.')
    zone = zones['HostedZones'][0]['Id']

    response = dns.change_resource_record_sets(
        HostedZoneId=zone,
        ChangeBatch={
            'Changes': [
                {
                    'Action': 'UPSERT',
                    'ResourceRecordSet': {
                        'Name': source,
                        'Type': 'A',
                        'TTL': 60,
                        'ResourceRecords': [
                            {
                                'Value': target
                            },
                        ],
                    }
                },
            ]
        }
    )

def poll():
    # If the keepalive exists, do nothing.
    if os.path.exists(KEEPALIVE_FILE):
        return

    # count established SSH connections
    count = int(subprocess.check_output('/bin/netstat -n | /bin/grep ":22 " | /bin/grep -wc ESTABLISHED || /bin/true', shell=True).strip())

    # anybody home?
    if count > 0:
        # Reset the warning if applicable
        try:
            os.remove(WARN_FILE)
        except OSError:
            pass
        return

    # Nobody home. Is this the first time?
    if not os.path.exists(WARN_FILE):
        # 15 minute warning (polling period is set by the cron job)
        with open(WARN_FILE, "w"):
            return

    # They were warned. Time to shut down.
    instance_id = meta_data('instance-id')
    if not instance_id:
        raise RuntimeError('Could not fetch instance id, aborting.')

    print('Shutting down.')
    ec2 = boto3.resource('ec2')
    ec2.instances.filter(InstanceIds=[instance_id]).stop()

def main():
    if len(sys.argv) < 2:
        print('This script should be run as a cron job')
        sys.exit(1)

    if 'AWS_DEFAULT_REGION' not in os.environ:
        os.environ['AWS_DEFAULT_REGION'] = get_region()

    cmd = sys.argv[1]
    if cmd == 'boot':
        boot()
    elif cmd == 'poll':
        poll()
    else:
        print('Invalid command.')
        sys.exit(2)

if __name__ == '__main__':
    main()
